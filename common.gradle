def versionProperties = new Properties()
versionProperties.load(new FileInputStream(rootProject.file("version.properties")))

ext.versionCode = versionProperties.getProperty("versionCode").toInteger()
ext.versionName = versionProperties.getProperty("versionName")

def privateProperties = new Properties()
def privatePropertiesFile = rootProject.file("private.properties")
if(privatePropertiesFile.exists()) {
    privateProperties.load(new FileInputStream(rootProject.file("private.properties")))
}
else {
    privateProperties.setProperty("githubUser", System.getenv("PUBLISH_GITHUB_USER") ?: "MISSING")
    privateProperties.setProperty("githubToken", System.getenv("PUBLISH_GITHUB_TOKEN") ?: "MISSING")

    privateProperties.setProperty("bintrayUser", System.getenv("PUBLISH_BINTRAY_USER") ?: "MISSING")
    privateProperties.setProperty("bintrayToken", System.getenv("PUBLISH_BINTRAY_TOKEN") ?: "MISSING")
}

ext.androidLibrary = {
    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'

    android {
        compileSdkVersion 29

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 29
            versionCode versionCode
            versionName versionName

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            consumerProguardFiles "consumer-rules.pro"
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8.toString()
            useIR = true
        }

        buildFeatures {
            compose true
        }

        composeOptions {
            kotlinCompilerVersion '1.4.0'
            kotlinCompilerExtensionVersion '1.0.0-alpha07'
        }
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

        implementation "androidx.compose.compiler:compiler:1.0.0-alpha07"
        implementation 'androidx.compose.ui:ui:1.0.0-alpha07'
        // Tooling support (Previews, etc.)
        implementation 'androidx.ui:ui-tooling:1.0.0-alpha07'
        // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
        implementation 'androidx.compose.foundation:foundation:1.0.0-alpha07'
        // Material Design
        implementation 'androidx.compose.material:material:1.0.0-alpha07'
        // Material design icons
        implementation 'androidx.compose.material:material-icons-core:1.0.0-alpha07'
        implementation 'androidx.compose.material:material-icons-extended:1.0.0-alpha07'
        // Integration with observables
        implementation 'androidx.compose.runtime:runtime-livedata:1.0.0-alpha07'
    }
}

ext.publishAndroidModule = { String groupName, String moduleName ->
    apply plugin: 'maven-publish'

    task androidSourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.srcDirs
    }

    afterEvaluate {
        publishing {
            publications {
                release(MavenPublication) {
                    from components.release

                    groupId groupName
                    artifactId moduleName
                    version versionName

                    artifact androidSourcesJar

                    pom.withXml {
                        def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')

                        // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                        configurations.implementation.allDependencies.each {
                            // Ensure dependencies such as fileTree are not included.
                            if (it.name != 'unspecified') {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }
                }
            }

            repositories {
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/isaac-udy/Enro")
                    credentials {
                        username = privateProperties['githubUser']
                        password = privateProperties['githubToken']
                    }
                }

                maven {
                    name = "bintray"
                    url = uri("https://api.bintray.com/maven/isaac-udy/Enro/$moduleName/;publish=1;override=1")
                    credentials {
                        username = privateProperties["bintrayUser"]
                        password = privateProperties["bintrayToken"]
                    }
                }
            }
        }
    }

    afterEvaluate {
        tasks.findByName("publishToMavenLocal")
                .dependsOn("assembleRelease")

        tasks.findByName("publish")
                .dependsOn("publishToMavenLocal")
    }
}

ext.publishJavaModule = { String groupName, String moduleName ->
    apply plugin: 'maven-publish'

    task sourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.java.srcDirs
    }

    afterEvaluate {
        publishing {
            publications {
                jar(MavenPublication) {
                    from components.java

                    groupId groupName
                    artifactId moduleName
                    version versionName

                    artifact sourcesJar
                }
            }

            repositories {
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/isaac-udy/Enro")
                    credentials {
                        username = privateProperties['githubUser']
                        password = privateProperties['githubToken']
                    }
                }

                maven {
                    name = "bintray"
                    url = uri("https://api.bintray.com/maven/isaac-udy/Enro/$moduleName/;publish=1;override=1")
                    credentials {
                        username = privateProperties["bintrayUser"]
                        password = privateProperties["bintrayToken"]
                    }
                }
            }
        }
    }

    afterEvaluate {
        tasks.findByName("publishToMavenLocal")
                .dependsOn("assemble")

        tasks.findByName("publish")
                .dependsOn("publishToMavenLocal")
    }
}